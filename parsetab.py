
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEASSIGN COMMA DEC DIVIDE DOT ELSE EQ ESCREVA FIMPROG FOR GE GT ID IF INIT INT LBRACE LE LEIA LPAREN LT MINUS NE NUM PLUS RBRACE RPAREN SEMICOLON TEXT TEXTO TIMES WHILEPrograma : INIT Declara Bloco FIMPROG DOTDeclara : Declara Tipo ListaId SEMICOLON\n               | Tipo ListaId SEMICOLONTipo : INT\n            | DEC\n            | TEXTListaId : ListaId COMMA ID\n               | IDBloco : Bloco Cmd\n             | CmdCmd : CmdLeitura\n           | CmdEscrita\n           | CmdExpr\n           | CmdIf\n           | WhileStmt\n           | ForStmtCmdLeitura : LEIA LPAREN ID RPAREN SEMICOLONCmdEscrita : ESCREVA LPAREN TEXTO RPAREN SEMICOLON\n                  | ESCREVA LPAREN ID RPAREN SEMICOLONCmdExpr : AssignStmt SEMICOLONAssignStmt : ID ASSIGN ExprExpr : Expr PLUS TermoExpr : Expr MINUS TermoExpr : TermoTermo : Termo TIMES FatorTermo : Termo DIVIDE FatorTermo : FatorFator : NUMFator : IDFator : LPAREN Expr RPARENCmdIf : IF LPAREN Expr Op_rel Expr RPAREN LBRACE Bloco RBRACE SEMICOLON\n             | IF LPAREN Expr Op_rel Expr RPAREN LBRACE Bloco RBRACE ELSE LBRACE Bloco RBRACE SEMICOLONOp_rel : LT\n              | GT\n              | LE\n              | GE\n              | NE\n              | EQWhileStmt : WHILE LPAREN Cond RPAREN LBRACE Bloco RBRACE SEMICOLONCond : Expr Op_rel ExprForStmt : FOR LPAREN AssignStmt SEMICOLON Cond SEMICOLON AssignStmt RPAREN LBRACE Bloco RBRACE SEMICOLON'
    
_lr_action_items = {'INIT':([0,],[2,]),'$end':([1,38,],[0,-1,]),'INT':([2,3,36,39,],[5,5,-3,-2,]),'DEC':([2,3,36,39,],[6,6,-3,-2,]),'TEXT':([2,3,36,39,],[7,7,-3,-2,]),'LEIA':([3,8,10,11,12,13,14,15,16,27,32,36,39,72,78,79,81,85,87,90,91,94,95,97,98,100,101,103,],[17,17,-10,-11,-12,-13,-14,-15,-16,-9,-20,-3,-2,-17,-18,-19,17,17,17,17,-39,17,-31,17,17,17,-41,-32,]),'ESCREVA':([3,8,10,11,12,13,14,15,16,27,32,36,39,72,78,79,81,85,87,90,91,94,95,97,98,100,101,103,],[19,19,-10,-11,-12,-13,-14,-15,-16,-9,-20,-3,-2,-17,-18,-19,19,19,19,19,-39,19,-31,19,19,19,-41,-32,]),'IF':([3,8,10,11,12,13,14,15,16,27,32,36,39,72,78,79,81,85,87,90,91,94,95,97,98,100,101,103,],[21,21,-10,-11,-12,-13,-14,-15,-16,-9,-20,-3,-2,-17,-18,-19,21,21,21,21,-39,21,-31,21,21,21,-41,-32,]),'WHILE':([3,8,10,11,12,13,14,15,16,27,32,36,39,72,78,79,81,85,87,90,91,94,95,97,98,100,101,103,],[22,22,-10,-11,-12,-13,-14,-15,-16,-9,-20,-3,-2,-17,-18,-19,22,22,22,22,-39,22,-31,22,22,22,-41,-32,]),'FOR':([3,8,10,11,12,13,14,15,16,27,32,36,39,72,78,79,81,85,87,90,91,94,95,97,98,100,101,103,],[23,23,-10,-11,-12,-13,-14,-15,-16,-9,-20,-3,-2,-17,-18,-19,23,23,23,23,-39,23,-31,23,23,23,-41,-32,]),'ID':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,27,29,30,31,32,33,34,35,36,37,39,46,55,56,57,58,62,63,64,65,66,67,68,70,71,72,78,79,81,85,86,87,90,91,94,95,97,98,100,101,103,],[18,25,-4,-5,-6,18,25,-10,-11,-12,-13,-14,-15,-16,-9,40,41,48,-20,41,41,18,-3,53,-2,41,41,41,41,41,41,-33,-34,-35,-36,-37,-38,41,41,-17,-18,-19,18,18,18,18,18,-39,18,-31,18,18,18,-41,-32,]),'FIMPROG':([8,10,11,12,13,14,15,16,27,32,72,78,79,91,95,101,103,],[26,-10,-11,-12,-13,-14,-15,-16,-9,-20,-17,-18,-19,-39,-31,-41,-32,]),'RBRACE':([10,11,12,13,14,15,16,27,32,72,78,79,85,90,91,95,97,100,101,103,],[-10,-11,-12,-13,-14,-15,-16,-9,-20,-17,-18,-19,88,93,-39,-31,99,102,-41,-32,]),'LPAREN':([17,19,21,22,23,30,33,34,46,55,56,57,58,62,63,64,65,66,67,68,70,71,],[29,31,33,34,35,46,46,46,46,46,46,46,46,46,-33,-34,-35,-36,-37,-38,46,46,]),'ASSIGN':([18,],[30,]),'SEMICOLON':([20,24,25,28,41,42,43,44,45,52,53,54,60,61,73,74,75,76,77,82,83,88,93,99,102,],[32,36,-8,39,-29,-21,-24,-27,-28,71,-7,72,78,79,-22,-23,-25,-26,-30,-40,86,91,95,101,103,]),'COMMA':([24,25,28,53,],[37,-8,37,-7,]),'DOT':([26,],[38,]),'NUM':([30,33,34,46,55,56,57,58,62,63,64,65,66,67,68,70,71,],[45,45,45,45,45,45,45,45,45,-33,-34,-35,-36,-37,-38,45,45,]),'TEXTO':([31,],[47,]),'RPAREN':([40,41,42,43,44,45,47,48,50,59,73,74,75,76,77,80,82,89,],[54,-29,-21,-24,-27,-28,60,61,69,77,-22,-23,-25,-26,-30,84,-40,92,]),'TIMES':([41,43,44,45,73,74,75,76,77,],[-29,57,-27,-28,57,57,-25,-26,-30,]),'DIVIDE':([41,43,44,45,73,74,75,76,77,],[-29,58,-27,-28,58,58,-25,-26,-30,]),'PLUS':([41,42,43,44,45,49,51,59,73,74,75,76,77,80,82,],[-29,55,-24,-27,-28,55,55,55,-22,-23,-25,-26,-30,55,55,]),'MINUS':([41,42,43,44,45,49,51,59,73,74,75,76,77,80,82,],[-29,56,-24,-27,-28,56,56,56,-22,-23,-25,-26,-30,56,56,]),'LT':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,63,63,-22,-23,-25,-26,-30,]),'GT':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,64,64,-22,-23,-25,-26,-30,]),'LE':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,65,65,-22,-23,-25,-26,-30,]),'GE':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,66,66,-22,-23,-25,-26,-30,]),'NE':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,67,67,-22,-23,-25,-26,-30,]),'EQ':([41,43,44,45,49,51,73,74,75,76,77,],[-29,-24,-27,-28,68,68,-22,-23,-25,-26,-30,]),'LBRACE':([69,84,92,96,],[81,87,94,98,]),'ELSE':([93,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'Declara':([2,],[3,]),'Tipo':([2,3,],[4,9,]),'Bloco':([3,81,87,94,98,],[8,85,90,97,100,]),'Cmd':([3,8,81,85,87,90,94,97,98,100,],[10,27,10,27,10,27,10,27,10,27,]),'CmdLeitura':([3,8,81,85,87,90,94,97,98,100,],[11,11,11,11,11,11,11,11,11,11,]),'CmdEscrita':([3,8,81,85,87,90,94,97,98,100,],[12,12,12,12,12,12,12,12,12,12,]),'CmdExpr':([3,8,81,85,87,90,94,97,98,100,],[13,13,13,13,13,13,13,13,13,13,]),'CmdIf':([3,8,81,85,87,90,94,97,98,100,],[14,14,14,14,14,14,14,14,14,14,]),'WhileStmt':([3,8,81,85,87,90,94,97,98,100,],[15,15,15,15,15,15,15,15,15,15,]),'ForStmt':([3,8,81,85,87,90,94,97,98,100,],[16,16,16,16,16,16,16,16,16,16,]),'AssignStmt':([3,8,35,81,85,86,87,90,94,97,98,100,],[20,20,52,20,20,89,20,20,20,20,20,20,]),'ListaId':([4,9,],[24,28,]),'Expr':([30,33,34,46,62,70,71,],[42,49,51,59,80,82,51,]),'Termo':([30,33,34,46,55,56,62,70,71,],[43,43,43,43,73,74,43,43,43,]),'Fator':([30,33,34,46,55,56,57,58,62,70,71,],[44,44,44,44,44,44,75,76,44,44,44,]),'Cond':([34,71,],[50,83,]),'Op_rel':([49,51,],[62,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> INIT Declara Bloco FIMPROG DOT','Programa',5,'p_Programa','compiler.py',124),
  ('Declara -> Declara Tipo ListaId SEMICOLON','Declara',4,'p_Declara','compiler.py',129),
  ('Declara -> Tipo ListaId SEMICOLON','Declara',3,'p_Declara','compiler.py',130),
  ('Tipo -> INT','Tipo',1,'p_Tipo','compiler.py',150),
  ('Tipo -> DEC','Tipo',1,'p_Tipo','compiler.py',151),
  ('Tipo -> TEXT','Tipo',1,'p_Tipo','compiler.py',152),
  ('ListaId -> ListaId COMMA ID','ListaId',3,'p_ListaId','compiler.py',156),
  ('ListaId -> ID','ListaId',1,'p_ListaId','compiler.py',157),
  ('Bloco -> Bloco Cmd','Bloco',2,'p_Bloco','compiler.py',165),
  ('Bloco -> Cmd','Bloco',1,'p_Bloco','compiler.py',166),
  ('Cmd -> CmdLeitura','Cmd',1,'p_Cmd','compiler.py',171),
  ('Cmd -> CmdEscrita','Cmd',1,'p_Cmd','compiler.py',172),
  ('Cmd -> CmdExpr','Cmd',1,'p_Cmd','compiler.py',173),
  ('Cmd -> CmdIf','Cmd',1,'p_Cmd','compiler.py',174),
  ('Cmd -> WhileStmt','Cmd',1,'p_Cmd','compiler.py',175),
  ('Cmd -> ForStmt','Cmd',1,'p_Cmd','compiler.py',176),
  ('CmdLeitura -> LEIA LPAREN ID RPAREN SEMICOLON','CmdLeitura',5,'p_CmdLeitura','compiler.py',181),
  ('CmdEscrita -> ESCREVA LPAREN TEXTO RPAREN SEMICOLON','CmdEscrita',5,'p_CmdEscrita','compiler.py',196),
  ('CmdEscrita -> ESCREVA LPAREN ID RPAREN SEMICOLON','CmdEscrita',5,'p_CmdEscrita','compiler.py',197),
  ('CmdExpr -> AssignStmt SEMICOLON','CmdExpr',2,'p_CmdExpr','compiler.py',209),
  ('AssignStmt -> ID ASSIGN Expr','AssignStmt',3,'p_AssignStmt','compiler.py',214),
  ('Expr -> Expr PLUS Termo','Expr',3,'p_Expr_plus','compiler.py',224),
  ('Expr -> Expr MINUS Termo','Expr',3,'p_Expr_minus','compiler.py',228),
  ('Expr -> Termo','Expr',1,'p_Expr_term','compiler.py',232),
  ('Termo -> Termo TIMES Fator','Termo',3,'p_Termo_times','compiler.py',237),
  ('Termo -> Termo DIVIDE Fator','Termo',3,'p_Termo_divide','compiler.py',241),
  ('Termo -> Fator','Termo',1,'p_Termo_fator','compiler.py',245),
  ('Fator -> NUM','Fator',1,'p_Fator_num','compiler.py',250),
  ('Fator -> ID','Fator',1,'p_Fator_id','compiler.py',254),
  ('Fator -> LPAREN Expr RPAREN','Fator',3,'p_Fator_expr','compiler.py',262),
  ('CmdIf -> IF LPAREN Expr Op_rel Expr RPAREN LBRACE Bloco RBRACE SEMICOLON','CmdIf',10,'p_CmdIf','compiler.py',267),
  ('CmdIf -> IF LPAREN Expr Op_rel Expr RPAREN LBRACE Bloco RBRACE ELSE LBRACE Bloco RBRACE SEMICOLON','CmdIf',14,'p_CmdIf','compiler.py',268),
  ('Op_rel -> LT','Op_rel',1,'p_Op_rel','compiler.py',290),
  ('Op_rel -> GT','Op_rel',1,'p_Op_rel','compiler.py',291),
  ('Op_rel -> LE','Op_rel',1,'p_Op_rel','compiler.py',292),
  ('Op_rel -> GE','Op_rel',1,'p_Op_rel','compiler.py',293),
  ('Op_rel -> NE','Op_rel',1,'p_Op_rel','compiler.py',294),
  ('Op_rel -> EQ','Op_rel',1,'p_Op_rel','compiler.py',295),
  ('WhileStmt -> WHILE LPAREN Cond RPAREN LBRACE Bloco RBRACE SEMICOLON','WhileStmt',8,'p_WhileStmt','compiler.py',300),
  ('Cond -> Expr Op_rel Expr','Cond',3,'p_Cond','compiler.py',308),
  ('ForStmt -> FOR LPAREN AssignStmt SEMICOLON Cond SEMICOLON AssignStmt RPAREN LBRACE Bloco RBRACE SEMICOLON','ForStmt',12,'p_ForStmt','compiler.py',313),
]
